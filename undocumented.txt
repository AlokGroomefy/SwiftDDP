MeteorCoreDataTableViewController.swift
	public class MeteorCoreDataTableViewController: UITableViewController, NSFetchedResultsControllerDelegate
	public func controller(controller: NSFetchedResultsController, didChangeObject anObject: AnyObject, atIndexPath indexPath: NSIndexPath?, forChangeType type: NSFetchedResultsChangeType, newIndexPath: NSIndexPath?)
	public func controllerWillChangeContent(controller: NSFetchedResultsController)
	public func controllerDidChangeContent(controller: NSFetchedResultsController)
MeteorCoreData.swift
	public class MeteorCoreData
DDPClient.swift
	public var logLevel = XCGLogger.LogLevel.Debug
MeteorCoreDataCollection.swift
	public protocol MeteorCoreDataCollectionDelegate
	func document(willBeCreatedWith fields:NSDictionary?, forObject object:NSManagedObject) -> NSManagedObject
	func document(willBeUpdatedWith fields:NSDictionary?, cleared:[String]?, forObject object:NSManagedObject) -> NSManagedObject
	public class MeteorCoreDataCollection:MeteorCollection
	public var delegate:MeteorCoreDataCollectionDelegate?
	public init(collectionName:String, entityName:String)
	public init(collectionName:String, entityName:String, stack:MeteorCoreDataStack)
	public var managedObjectContext:NSManagedObjectContext
	public func newObject() -> NSManagedObject
	public func find() -> [NSManagedObject]
	public func findOne(id:String) -> NSManagedObject?
	public func exists(id:String) -> Bool
	public func exists(collection:String, id:String) -> Bool
	public func insert(fields:NSDictionary)
	public func update(id:String, fields:NSDictionary, local:Bool)
	public func update(id:String, fields:NSDictionary)
	public func remove(withId id:String)
	public func remove(withId id:String, local:Bool)
	override public func documentWasAdded(collection:String, id:String, fields:NSDictionary?)
	override public func documentWasChanged(collection:String, id:String, fields:NSDictionary?, cleared:[String]?)
	override public func documentWasRemoved(collection:String, id:String)
DDPMessage.swift
	public enum DDPMessageType:String
	case Connected  = "connected"
	case Failed     = "failed"
	case Ping       = "ping"
	case Pong       = "pong"
	case Nosub      = "nosub"
	case Added      = "added"
	case Changed    = "changed"
	case Removed    = "removed"
	case Ready      = "ready"
	case AddedBefore = "addedBefore"
	case MovedBefore = "movedBefore"
	case Result     = "result"
	case Updated    = "updated"
	case Error      = "error"
	case Unhandled  = "unhandled"
	public static func toString(json:AnyObject) -> String?
	public func hasProperty(name:String) -> Bool
MeteorCoreDataStack.swift
	public protocol MeteorCoreDataStack
	var mainContext: NSManagedObjectContext { get }
	var backgroundContext: NSManagedObjectContext { get }
	var managedObjectContext:NSManagedObjectContext { get }
DDPExtensions.swift
	public func signup(params:NSDictionary, callback:((result: AnyObject?, error: DDPError?) -> ())?)
	public func signupWithEmail(email: String, password: String, callback: ((result:AnyObject?, error:DDPError?) -> ())?)
	public func signupWithEmail(email: String, password: String, profile: NSDictionary, callback: ((result:AnyObject?, error:DDPError?) -> ())?)
	public func logout()
Meteor.swift
	public convenience init(url:String, email:String, password:String)
	public func documentWasChanged(collection:String, id:String, fields:NSDictionary?, cleared:[String]?)
	public func documentWasRemoved(collection:String, id:String)
CoreDataExtensions.swift
	public var dictionary:NSDictionary
